/********************************************************************************/
/* html body */


html, body {
    height: 100%;
    background-color: var(--background-color);
  }
  
  body {
    /* body est un container flex en column */
    display: flex;
    flex-direction: column;
    overflow-x: hidden;
  }
  
  /********************************************************************************/
  main {
    /* contrairement aux autres enfants (header, footer), prendre tout l'espace restant */
    flex-grow: 1;
  
    padding: 50px 30px;
    overflow-y: auto; /* permet de scroller au sein du main et non sur toute la page */
  }
  
  /********************************************************************************/
  /* sections */
  
  main section {
    /* chaque section est un container flex en column */
    flex-direction: column;
  
    display: none;
    margin: auto;
    max-width: 1200px; /* max-width pour les gros écrans... éviter d'avoir une liste de 12'000px de large */
  }
  
  main section.active { /* avec la classe "active", on affiche la section */
    display: flex;
  }
  
  #player-section {
    height: 100%;
    padding: 0;
    /* cas special, le player prend tout l'espace et centre son contenu. Les autres section partent du haut */
    justify-content: center;
    align-items: center;
  }
  
  /********************************************************************************/
  /* footer */
  
  footer {
    flex-shrink: 0; /* pas le droit de se réduire */
  
    height: 100px;
    background: var(--color-tertiary);
  }
  
  footer nav {
    /* nav est de nouvau un container flex */
    height: 100%;
    display: flex;
  }
  
  footer nav a {
    /* chaque lien prend 1 part de l'espace restant, ils font donc tous la même taille */
    flex-grow: 1;
  
    /*
      Pour center l'icône, on refait une flex box à un seul enfant (l'icône). Le lien est donc le parent flex et l'icône
      son unique enfant à centrer. Milles autres façons de faire ça... mais insistons sur les flexboxes :)
      Le centering vertical en CSS peut être parfois tricky...
  
      Avis perso et complètement subjectif: les flexboxes servent à centrer un ou plusieurs éléments, verticalement
      et horizontalement. Autant s'en servir, plutôt que de bricoler des top: 50%; avec des marges négatives, par exemple.
      Il y a aussi l'option vertical-align, mais qui ne marchera que dans certains cas... (si le parent a une taille fixe)
    */
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
  
    text-align: center;
    text-decoration: none;
  }
  
  /* tout ce qui est dans le lien du nav verra son changement de couleur animé  */
  footer nav a * {
    transition: color var(--default-transition);
  }
  
  footer nav a.active *,
  footer nav a:hover * {
    color: var(--color-primary);
  }
  
  /* taille de l'icône */
  footer nav a .material-icons {
    font-size: 2.5rem;
  }
  
  /* pour les petits écrans, on diminue la taille du footer et on cache le texte des icônes */
  @media (max-width: 768px) {
    footer {
      height: 80px;
    }
  
    footer nav a span:last-of-type {
      display: none;
    }
  }